import numpy as np
import cv2
from matplotlib import pyplot as plt
import os
from skimage import io
from google.colab.patches import cv2_imshow
from numpy.linalg import svd
from PIL import Image
origem = "https://i.pinimg.com/originals/a5/0c/64/a50c6419a7da56be403a445d5dc3f8d4.jpg"
image = io.imread(origem) 
img = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
def compress_image(img_name, img, k):
    print("processando...")

    # Dividindo a matriz em três matrizes 2D
    r = img[:, :, 0]  # Vetor R
    g = img[:, :, 1]  # Vetor G
    b = img[:, :, 2]  # Vetor B

    print("comprimindo...")

    # Calculando os componentes svd para todas as três matrizes
    ur, sr, vr = svd(r, full_matrices=False)
    ug, sg, vg = svd(g, full_matrices=False)
    ub, sb, vb = svd(b, full_matrices=False)

    print('dimensões do canal r: {}'.format(r.shape))

    rr = np.dot(ur[:, :k], np.dot(np.diag(sr[:k]), vr[:k, :]))
    rg = np.dot(ug[:, :k], np.dot(np.diag(sg[:k]), vg[:k, :]))
    rb = np.dot(ub[:, :k], np.dot(np.diag(sb[:k]), vb[:k, :]))

    print("arranging...")

    # Criando uma matriz de zeros
    rimg = np.zeros(img.shape)

    # Adicionando matriz para R, G & B na matriz criada
    rimg[:, :, 0] = rr
    rimg[:, :, 1] = rg
    rimg[:, :, 2] = rb


    # Vai verificar se algum valor é menor que 0, e será convertido para seu absoluto
    # e, se algum valor for maior que 255, será convertido para 255
    # porque na matriz de imagem da unit8 só pode ter um valor entre 0 e 255
    for ind1, row in enumerate(rimg):
        for ind2, col in enumerate(row):
            for ind3, value in enumerate(col):
                if value < 0:
                    rimg[ind1, ind2, ind3] = abs(value)
                if value > 255:
                    rimg[ind1, ind2, ind3] = 255

    # convertendo a matriz de imagem compactada para o tipo unit8, e para conversão adicional em objeto de imagem
    compressed_image = rimg.astype(np.uint8)

    # Mostrando a imagem compactada
    plt.title("Image Name - figura compactada: " + img_name + "\n")
    plt.imshow(compressed_image)
    plt.axis('off')
    plt.show()
    cv2.imwrite("Imagem/comp-" + str(img_name) + ".jpg", compressed_image)
    
k = np.rint(0.8*512) #Representa 80% dos valores singulares
print(k) 
k = 410
compress_image("foto", image, k)
k = np.rint(0.7*512) #Representa 70% dos valores singulares
print(k) 
k = 358
compress_image("foto", image, k)
k = np.rint(0.6*512) #Representa 60% dos valores singulares
print(k) 
k = 307
compress_image("foto", image, k)
